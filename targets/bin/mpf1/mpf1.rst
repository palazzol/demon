                              1 ;****************************************************************
                              2 ; This file is auto-generated by ddmake from mpf1.toml
                              3 ; *** DO NOT EDIT ***
                              4 ;****************************************************************
                              5 
                              6 ; Start of chip memory mapping
                     0000     7 STRTADD = 0x0000
                              8 
                              9 ; 2K ROM
                     0800    10 ROMSIZE = 0x0800
                             11 
                             12 ; The code actually needs 4 bytes ram at this address for the command buffer.
                             13 ; However, stack also starts here, and will grow down (towards 0) from this point.
                             14 ; So, we need some above and below this address.  I generally choose the
                             15 ; Top of RAM minus 16
                     1FF0    16 RAMADDR = 0x1ff0
                             17 
                             18 ; delay factor
                     0180    19 BIGDEL = 0x0180
                             20 
                             21         .include "../core/dd.def"
                              1 
                     0800     2 ROMEND  .equ    STRTADD+ROMSIZE
                              3 
                              4 
                             22         .include "../core/z80.def"
                              1 ; Same for all Z80s
                     0038     2 IRQADD  .equ    0x0038      ; location of IRQ handler
                     0066     3 NMIADD  .equ    0x0066      ; location of NMI handler
                             23         .include "../io/romio.def"
                              1 ; For Demon Debugger Hardware - Rev D 
                              2 
                     07A0     3 IOREGR   .equ   STRTADD+0x07a0    ;reserved region for IO READ
                     07C0     4 IOREGW   .equ   STRTADD+0x07c0    ;reserved region for IO WRITE
                              5 
                     07A0     6 IOADD    .equ   IOREGR            ;start of region
                     07E0     7 IOEND    .equ   STRTADD+0x07e0    ;end of region
                             24 
                             25 ;------- region1  -----------------------------------------------
                             26 
                             27         .bank   region1 (base=STRTADD, size=IRQADD-STRTADD)
                             28         .area   region1 (ABS, BANK=region1)
                             29 
                             30 ;
                             31 ;       START CODE
                             32 ;
   0000                      33 START:
   0000 F3            [ 4]   34         DI                  ; Disable interrupts - we don't handle them
   0001 31 F0 1F      [10]   35         LD      SP,RAMADDR  ; have to set valid SP
                             36 ;       YOUR SMALL CODE CAN GO HERE
   0004 C3 68 00      [10]   37         JP      START2
                             38 
                             39 
                             40 ;------- region2  -----------------------------------------------
                             41 
                             42         .bank   region2 (base=IRQADD, size=NMIADD-IRQADD)
                             43         .area   region2 (ABS, BANK=region2)
                             44 
                             45 ;
                             46 ;       IRQ HANDLER
                             47 ;
   0038                      48 IRQ:
   0038 ED 4D         [14]   49         RETI
                             50 
                             51 
                             52 ;------- region3  -----------------------------------------------
                             53 
                             54         .bank   region3 (base=NMIADD, size=IOADD-NMIADD)
                             55         .area   region3 (ABS, BANK=region3)
                             56 
                             57 ;
                             58 ;       NMI HANDLER
                             59 ;
   0066                      60 NMI:
   0066 ED 45         [14]   61         RETN
                             62 
                             63 ;
                             64 ;       START CODE 2
                             65 ;
   0068                      66 START2:
                             67 ;       YOUR CODE CAN GO HERE
   0068 C3 6B 00      [10]   68         JP      INIT
                             69 
                             70         .include "../core/z80_main.asm"
                              1 ; I2C ADDRESSING
                     0011     2 I2CRADR .equ    0x11        ; I2C read address  - I2C address 0x08
                     0010     3 I2CWADR .equ    0x10        ; I2C write address - I2C address 0x08
                              4 
                              5 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              6 ; RAM Variables	
                              7 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              8 
                     1FF0     9 CMDBUF  .equ    RAMADDR     ; Need only 4 bytes of ram for command buffer
                             10 
   006B                      11 INIT:
   006B DD 21 F0 1F   [14]   12         LD      IX,CMDBUF   ; Easy to index command buffer
   006F 16 00         [ 7]   13         LD      D,#0x00     ; initialize D to prevent index overflow
                             14 
                             15 ; Main routine
   0071                      16 MAIN:
   0071 CD 77 01      [17]   17         CALL    EVERY
   0074 CD 1A 01      [17]   18         CALL    POLL
   0077 DA 71 00      [10]   19         JP      C,MAIN
                             20         
   007A 01 80 01      [10]   21         LD      BC,BIGDEL
   007D                      22 DLOOP:
   007D 0B            [ 6]   23         DEC     BC
   007E 79            [ 4]   24         LD      A,C
   007F B0            [ 4]   25         OR      B
   0080 C2 7D 00      [10]   26         JP      NZ,DLOOP
   0083 C3 71 00      [10]   27         JP      MAIN
                             28 
                             29 ; Delay for half a bit time
   0086                      30 I2CDELAY:
   0086 C9            [10]   31         RET     ; This is plenty
                             32 
                             33 ; I2C Start Condition
                             34 ; Uses HL
                             35 ; Destroys A
   0087                      36 I2CSTART:
   0087 CD A5 01      [17]   37         CALL    CLRSDA      
   008A CD 88 01      [17]   38         CALL    CLRSCL
   008D C9            [10]   39         RET
                             40 
                             41 ; I2C Stop Condition
                             42 ; Uses HL
                             43 ; Destroys A
   008E                      44 I2CSTOP:
   008E CD A5 01      [17]   45         CALL    CLRSDA
   0091 CD 78 01      [17]   46         CALL    SETSCL
   0094 CD 95 01      [17]   47         CALL    SETSDA
   0097 C9            [10]   48         RET
                             49 
                             50 ; I2C Read Bit routine
                             51 ; Returns bit in carry blag
                             52 ; Destroys A
   0098                      53 I2CRBIT:
   0098 CD 95 01      [17]   54         CALL    SETSDA
   009B CD 78 01      [17]   55         CALL    SETSCL
   009E CD B5 01      [17]   56         CALL    READSDA
   00A1 F5            [11]   57         PUSH    AF          ; save carry flag
   00A2 CD 88 01      [17]   58         CALL    CLRSCL
   00A5 F1            [10]   59         POP     AF          ; rv in carry flag
   00A6 C9            [10]   60         RET
                             61 
                             62 ; I2C Write Bit routine
                             63 ; Takes carry flag
                             64 ; Destroys A
   00A7                      65 I2CWBIT:
   00A7 30 05         [12]   66         JR      NC,DOCLR
   00A9 CD 95 01      [17]   67         CALL    SETSDA
   00AC 18 03         [12]   68         JR      AHEAD
   00AE                      69 DOCLR:
   00AE CD A5 01      [17]   70         CALL    CLRSDA
   00B1                      71 AHEAD:
   00B1 CD 78 01      [17]   72         CALL    SETSCL
   00B4 CD 88 01      [17]   73         CALL    CLRSCL
   00B7 C9            [10]   74         RET
                             75 
                             76 ; I2C Write Byte routine
                             77 ; Takes A
                             78 ; Destroys B
                             79 ; Returns carry bit
   00B8                      80 I2CWBYTE:
   00B8 06 08         [ 7]   81         LD      B,8
   00BA                      82 ILOOP:
   00BA C5            [11]   83         PUSH    BC          ; save B
   00BB CB 07         [ 8]   84         RLC     A    
   00BD F5            [11]   85         PUSH    AF          ; save A
   00BE CD A7 00      [17]   86         CALL    I2CWBIT
   00C1 F1            [10]   87         POP     AF
   00C2 C1            [10]   88         POP     BC
   00C3 10 F5         [13]   89         DJNZ    ILOOP
   00C5 CD 98 00      [17]   90         CALL    I2CRBIT
   00C8 C9            [10]   91         RET
                             92 
                             93 ; I2C Read Byte routine
                             94 ; Destroys BC
                             95 ; Returns A
   00C9                      96 I2CRBYTE:
   00C9 06 08         [ 7]   97         LD      B,8
   00CB 0E 00         [ 7]   98         LD      C,0
   00CD                      99 LOOP3:
   00CD C5            [11]  100         PUSH    BC
   00CE CD 98 00      [17]  101         CALL    I2CRBIT     ; get bit in carry flag
   00D1 C1            [10]  102         POP     BC
   00D2 CB 11         [ 8]  103         RL      C           ; rotate carry into bit0 of C register
   00D4 10 F7         [13]  104         DJNZ    LOOP3
   00D6 AF            [ 4]  105         XOR     A           ; clear carry flag              
   00D7 C5            [11]  106         PUSH    BC
   00D8 CD A7 00      [17]  107         CALL    I2CWBIT
   00DB C1            [10]  108         POP     BC
   00DC 79            [ 4]  109         LD      A,C
   00DD C9            [10]  110         RET
                            111 ;
                            112 
                            113 ; Read 4-byte I2C Command from device into CMDBUF
                            114 ; Uses HL
                            115 ; Destroys A,BC,HL
   00DE                     116 I2CRREQ:
   00DE CD 87 00      [17]  117         CALL    I2CSTART
   00E1 3E 11         [ 7]  118         LD      A,I2CRADR
   00E3 CD B8 00      [17]  119         CALL    I2CWBYTE
   00E6 38 1A         [12]  120         JR      C,SKIP
   00E8 CD C9 00      [17]  121         CALL    I2CRBYTE
   00EB DD 77 00      [19]  122         LD      (IX),A
   00EE CD C9 00      [17]  123         CALL    I2CRBYTE
   00F1 DD 77 01      [19]  124         LD      (IX+1),A  
   00F4 CD C9 00      [17]  125         CALL    I2CRBYTE
   00F7 DD 77 02      [19]  126         LD      (IX+2),A
   00FA CD C9 00      [17]  127         CALL    I2CRBYTE
   00FD DD 77 03      [19]  128         LD      (IX+3),A
   0100 18 14         [12]  129         JR      ENDI2C
                            130     
   0102                     131 SKIP:                       ; If no device present, fake an idle response
   0102 3E 2E         [ 7]  132         LD      A,0x2e  ; '.'
   0104 DD 77 00      [19]  133         LD      (IX),A
   0107 18 0D         [12]  134         JR      ENDI2C
                            135 
   0109                     136 I2CSRESP:
   0109 F5            [11]  137         PUSH    AF
   010A CD 87 00      [17]  138         CALL    I2CSTART
   010D 3E 10         [ 7]  139         LD      A,I2CWADR
   010F CD B8 00      [17]  140         CALL    I2CWBYTE
   0112 F1            [10]  141         POP     AF
   0113 CD B8 00      [17]  142         CALL    I2CWBYTE
   0116                     143 ENDI2C:
   0116 CD 8E 00      [17]  144         CALL    I2CSTOP
   0119 C9            [10]  145         RET
                            146 ;
                            147 
                            148 ; Main Polling loop
                            149 ; Return carry flag if we got a valid command (not idle)
   011A                     150 POLL:
   011A CD DE 00      [17]  151         CALL    I2CRREQ
   011D DD 7E 00      [19]  152         LD      A,(IX)
   0120 FE 52         [ 7]  153         CP      0x52    ; 'R' - Read memory
   0122 28 1B         [12]  154         JR      Z,MREAD
   0124 FE 57         [ 7]  155         CP      0x57    ; 'W' - Write memory
   0126 28 1D         [12]  156         JR      Z,MWRITE
   0128 FE 49         [ 7]  157         CP      0x49    ; 'I' - Input from port
   012A 28 2D         [12]  158         JR      Z,PREAD
   012C FE 4F         [ 7]  159         CP      0x4F    ; 'O' - Output from port
   012E 28 30         [12]  160         JR      Z,PWRITE
   0130 FE 43         [ 7]  161         CP      0x43    ; 'C' - Call subroutine
   0132 28 3B         [12]  162         JR      Z,REMCALL
   0134 3F            [ 4]  163         CCF
   0135 C9            [10]  164         RET
   0136                     165 LOADHL:
   0136 DD 7E 01      [19]  166         LD      A,(IX+1)
   0139 67            [ 4]  167         LD      H,A
   013A DD 7E 02      [19]  168         LD      A,(IX+2)
   013D 6F            [ 4]  169         LD      L,A
   013E C9            [10]  170         RET    
   013F                     171 MREAD:
   013F CD 50 01      [17]  172         CALL    LOADBC
   0142 0A            [ 7]  173         LD      A,(BC)
   0143 18 25         [12]  174         JR      SRESP
   0145                     175 MWRITE:
   0145 CD 50 01      [17]  176         CALL    LOADBC
   0148 DD 7E 03      [19]  177         LD      A,(IX+3)
   014B 02            [ 7]  178         LD      (BC),A
   014C 3E 57         [ 7]  179         LD      A,0x57  ;'W'
   014E 18 1A         [12]  180         JR      SRESP
   0150                     181 LOADBC:
   0150 DD 7E 01      [19]  182         LD      A,(IX+1)
   0153 47            [ 4]  183         LD      B,A
   0154 DD 7E 02      [19]  184         LD      A,(IX+2)
   0157 4F            [ 4]  185         LD      C,A
   0158 C9            [10]  186         RET
   0159                     187 PREAD:
   0159 CD 50 01      [17]  188         CALL    LOADBC
   015C ED 78         [12]  189         IN      A,(C)
   015E 18 0A         [12]  190         JR      SRESP
   0160                     191 PWRITE:
   0160 CD 50 01      [17]  192         CALL    LOADBC
   0163 DD 7E 03      [19]  193         LD      A,(IX+3)
   0166 ED 79         [12]  194         OUT     (C),A
   0168 3E 4F         [ 7]  195         LD      A,0x4F  ;'O'
   016A                     196 SRESP:
   016A CD 09 01      [17]  197         CALL    I2CSRESP
   016D                     198 RHERE:
   016D 37            [ 4]  199         SCF
   016E C9            [10]  200         RET
   016F                     201 REMCALL:
   016F 21 00 00      [10]  202         LD      HL,START
   0172 E5            [11]  203         PUSH    HL
   0173 CD 36 01      [17]  204         CALL    LOADHL
   0176 E9            [ 4]  205         JP      (HL)
                            206 
                             71 ;
                             72 ;       EVERY CODE
                             73 ;
   0177                      74 EVERY:
                             75 ;       YOUR CODE CAN GO HERE
   0177 C9            [10]   76         RET
                             77 
                             78         .include "../io/z80_romio.asm"
                              1 
                              2 ; For Demon Debugger Hardware - Rev D 
                              3 
                              4 ; Set the SCL pin high
                              5 ; D is the global output buffer
                              6 ; Destroys A
   0178                       7 SETSCL:
   0178 7A            [ 4]    8         LD      A,D
   0179 F6 01         [ 7]    9         OR      0x01
   017B 57            [ 4]   10         LD      D,A
   017C E5            [11]   11         PUSH    HL
   017D 26 07         [ 7]   12         LD      H,#>IOREGW
   017F C6 C0         [ 7]   13         ADD     A,#<IOREGW 
   0181 6F            [ 4]   14         LD      L,A
   0182 7E            [ 7]   15         LD      A,(HL)
   0183 E1            [10]   16         POP     HL
   0184 CD 86 00      [17]   17         CALL    I2CDELAY
   0187 C9            [10]   18         RET
                             19     
                             20 ; Set the SCL pin low
                             21 ; D is the global output buffer
                             22 ; Destroys A
   0188                      23 CLRSCL:
   0188 7A            [ 4]   24         LD      A,D
   0189 E6 1E         [ 7]   25         AND     0x1E
   018B 57            [ 4]   26         LD      D,A
   018C E5            [11]   27         PUSH    HL
   018D 26 07         [ 7]   28         LD      H,#>IOREGW
   018F C6 C0         [ 7]   29         ADD     A,#<IOREGW 
   0191 6F            [ 4]   30         LD      L,A
   0192 7E            [ 7]   31         LD      A,(HL)
   0193 E1            [10]   32         POP     HL
   0194 C9            [10]   33         RET
                             34 
                             35 ; Set the DOUT pin low
                             36 ; D is the global output buffer
                             37 ; Destroys A 
   0195                      38 SETSDA:
   0195 7A            [ 4]   39         LD      A,D
   0196 E6 1D         [ 7]   40         AND     0x1D
   0198 57            [ 4]   41         LD      D,A
   0199 E5            [11]   42         PUSH    HL
   019A 26 07         [ 7]   43         LD      H,#>IOREGW
   019C C6 C0         [ 7]   44         ADD     A,#<IOREGW 
   019E 6F            [ 4]   45         LD      L,A
   019F 7E            [ 7]   46         LD      A,(HL)
   01A0 E1            [10]   47         POP     HL
   01A1 CD 86 00      [17]   48         CALL    I2CDELAY
   01A4 C9            [10]   49         RET
                             50 
                             51 ; Set the DOUT pin high
                             52 ; D is the global output buffer
                             53 ; Destroys A  
   01A5                      54 CLRSDA:
   01A5 7A            [ 4]   55         LD      A,D
   01A6 F6 02         [ 7]   56         OR      0x02
   01A8 57            [ 4]   57         LD      D,A
   01A9 E5            [11]   58         PUSH    HL
   01AA 26 07         [ 7]   59         LD      H,#>IOREGW
   01AC C6 C0         [ 7]   60         ADD     A,#<IOREGW 
   01AE 6F            [ 4]   61         LD      L,A
   01AF 7E            [ 7]   62         LD      A,(HL)
   01B0 E1            [10]   63         POP     HL
   01B1 CD 86 00      [17]   64         CALL    I2CDELAY
   01B4 C9            [10]   65         RET
                             66 
                             67 ; Read the DIN pin 
                             68 ; returns bit in carry flag    
   01B5                      69 READSDA:
   01B5 7A            [ 4]   70         LD      A,D
   01B6 E5            [11]   71         PUSH    HL
   01B7 26 07         [ 7]   72         LD      H,#>IOREGR
   01B9 C6 A0         [ 7]   73         ADD     A,#<IOREGR
   01BB 6F            [ 4]   74         LD      L,A
   01BC 7E            [ 7]   75         LD      A,(HL)
   01BD E1            [10]   76         POP     HL
   01BE CB 3F         [ 8]   77         SRL     A           ;carry flag
   01C0 C9            [10]   78         RET
                             79 
                             80 ;------- region4  -----------------------------------------------
                             81 
                             82         .bank   region4 (base=IOADD, size=IOEND-IOADD)
                             83         .area   region4 (ABS, BANK=region4)
                             84 
                             85         .include "../io/romio_table.asm"
                              1 
                              2 ; 
                              3 ; For Demon Debugger Hardware - Rev D 
                              4 ;
                              5 ; In earlier hardware designs, I tried to capture the address bus bits on a 
                              6 ; read cycle, to use to write to the Arduino.  But it turns out it is impossible
                              7 ; to know exactly when to sample these address bits across all platforms, designs, and 
                              8 ; clock speeds
                              9 ;
                             10 ; The solution I came up with was to make sure the data bus contains the same information
                             11 ; as the lower address bus during these read cycles, so that I can sample the data bus just like the 
                             12 ; CPU would.
                             13 ;
                             14 ; This block of memory, starting at 0x07c0, is filled with consecutive integers.
                             15 ; When the CPU reads from a location, the data bus matches the lower bits of the address bus.  
                             16 ; And the data bus read by the CPU is also written to the Arduino.
                             17 ; 
                             18 ; Note: Currently, only the bottom two bits are used, but reserving the memory
                             19 ; this way insures that up to 5 bits could be used 
                             20 ; 
                             21         ; ROMIO READ Area - reserved
   07A0 FF FF FF FF FF FF    22         .DB     0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
        FF FF FF FF FF FF
        FF FF FF FF
   07B0 FF FF FF FF FF FF    23         .DB     0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
        FF FF FF FF FF FF
        FF FF FF FF
                             24 
                             25         ; ROMIO WRITE Area - data is used
   07C0 00 01 02 03 04 05    26         .DB     0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
        06 07 08 09 0A 0B
        0C 0D 0E 0F
   07D0 10 11 12 13 14 15    27         .DB     0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f
        16 17 18 19 1A 1B
        1C 1D 1E 1F
                             28 
                             86 
                             87 ;------- region5  -----------------------------------------------
                             88 
                             89         .bank   region5 (base=IOEND, size=ROMEND-IOEND)
                             90         .area   region5 (ABS, BANK=region5)
                             91 
                             92 
